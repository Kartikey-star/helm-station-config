name: Build, Test and Release

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build artifacts
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.API_TOKEN_GITHUB }}

      - name: Set up Python 3.x Part 1
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Set up Python 3.x Part 2
        run: |
          # set up python
          python3 -m venv ve1
          ve1/bin/pip3 install locust==2.12.0

      - name: Get files in push request
        id: files
        uses: jitterbit/get-changed-files@v1
        with:
          format: 'csv'

      - name: Check if chart template file was chnaged
        id: check_files
        run: |
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.files.outputs.added_modified }}')
          for added_modified_file in "${added_modified_files[@]}"; do
            echo "Do something with this ${added_modified_file}"
            echo "${added_modified_file}"
            if [ "${added_modified_file}" == "chart/device-registry/"*"-test.yaml" ]; then
                echo "test update: ${added_modified_file}"
                echo "::set-output name=test_phase::test"
                echo "::set-output name=next_phase::stage"
                echo "::set-output name=updated_file::${added_modified_file}"
                echo "::set-output name=next_file::chart/device-registry/values-stage.yaml"
            elif [ "${added_modified_file}" == "chart/device-registry/"*"-stage.yaml" ]; then
                echo "stage update: ${added_modified_file}"
                echo "::set-output name=test_phase::stage"
                echo "::set-output name=next_phase::production"
                echo "::set-output name=updated_file::${added_modified_file}"
                base_name=$(basename ${added_modified_file})
                echo "::set-output name=next_file::chart/device-registry/values-production.yaml"
            elif  [ "${added_modified_file}" == "chart/device-registry/"*"-production.yaml" ]; then
                echo "production update: ${added_modified_file}"
                echo "::set-output name=test_phase::production"
                echo "::set-output name=next_phase::none"
                echo "::set-output name=updated_file::${added_modified_file}"
                echo "::set-output name=next_file::none"
            else
                echo "ignore update"
                echo "::set-output name=test-phase::none"
                echo "::set-output name=next_phase::none"
                echo "::set-output name=updated_file::none"
                echo "::set-output name=next_file::none"
            fi
          done

      - name: Get metadata from updated file
        if: ${{ steps.check_files.outputs.updated_file != 'none' }}
        id: template-yaml-data
        uses: KJ002/read-yaml@main
        with:
            file: ${{ steps.check_files.outputs.updated_file }}
            key-path: '["deviceTag"]'

      # - name: Write metadata to a json file
      #   if: ${{ steps.check_files.outputs.updated_file != 'none' }}
      #   env:
      #     METADATA: ${{ steps.template-yaml-data.outputs.data }}
      #   run: |
      #     echo metadata: $METADATA
      #     echo $METADATA | sed 's:app.kubernetes.io/::g'
      #     echo $METADATA | sed 's:app.kubernetes.io/::g' > temp.json

      # - name: get config version from metadata
      #   if: ${{ steps.check_files.outputs.updated_file != 'none' }}
      #   id: config-version
      #   uses: notiz-dev/github-action-json-property@release
      #   with:
      #     path: 'temp.json'
      #     prop_path: 'labels.version'

      # - if: ${{ steps.check_files.outputs.updated_file != 'none' }}
      #   id: new_version
      #   run: |
      #     echo "updated version is ${{ steps.config-version.outputs.prop }}"
      #     echo "::set-output name=version::${{ steps.config-version.outputs.prop }}"
      #     rm temp.json

      - name: Set cluster login params
        id: login-params
        if: ${{ steps.verify_requires.outputs.cluster_needed == 'true' }}
        run: |
          #calculate cluster params
          API_SERVER=$( echo -n ${{ secrets.API_SERVER }} | base64 -d)
          echo "::set-output name=API_SERVER::${API_SERVER}"
      - uses: redhat-actions/oc-login@v1
        id: oc_login
        if: ${{ steps.verify_requires.outputs.cluster_needed == 'true' }}
        with:
          openshift_server_url: ${{ steps.login-params.outputs.API_SERVER }}
          openshift_token: ${{ secrets.CLUSTER_TOKEN }}
          insecure_skip_tls_verify: ${{ steps.set-env.outputs.insecure_skip_tls_verify }}

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.9.2

      - name: If test phase run helm test
        id: test_phase
        env:
          KUBECONFIG: /tmp/ci-kubeconfig
        if: ${{ steps.check_files.outputs.test_phase == 'test' }}
        run: |
          oc create ns helm-test
          helm install device-test-release chart/device-registry --values chart/device-registry/values-test.yaml -n helm-test
          helm test device-test-release -n helm-test
      - name: If test phase cleanup
        id: clean_phase
        if: ${{ steps.check_files.outputs.test_phase == 'test' }}
        run: |
          helm uninstall device-test-release  -n helm-test
          oc delete ns helm-test

      - name: If stage phase run helm stress test
        id: stage_phase
        if: ${{ steps.check_files.outputs.test_phase == 'stage' }}
        run: |
          HOST_NAME=$(oc get route -n stage -o json | jq -r ".items[] |.spec.host")
          ve1/bin/locust --headless --users 1 --spawn-rate 1 -H ${HOST_NAME}:5000 -f ./load-testing/stress.py -t 5m

      - name: If stage production - celebrate!r
        id: production_phase
        if: ${{ steps.check_files.outputs.test_phase == 'production' }}
        run: |
          echo "Updated stage file: ${{ steps.check_files.outputs.updated_file }}"
          echo "File to be updated: ${{ steps.check_files.outputs.next_file }}"

      - name: Update next stage to trigger pipeline
        id: update_file
        if: ${{ steps.check_files.outputs.next_file != 'none' && steps.test_phase.outcome != 'failure' && steps.stage_phase.outcome != 'failure' }}
        run: |
          to_replace=""
          while read -r line;
          do
            echo "check $line"
            if [[ "$line" == "app.kubernetes.io/version"* ]]; then
                to_replace=$line
                echo "to_replace: $to_replace"
                break
            fi
          done < ${{ steps.check_files.outputs.next_file}}

          if [ "$to_replace" != "" ]; then
              replace_with="app.kubernetes.io/version: "${{ steps.new_version.outputs.version }}
              echo "replace_with: $replace_with"
              sed -i "s|$to_replace|$replace_with|" ${{ steps.check_files.outputs.next_file }}
          fi

      - name: Commit the change
        if: ${{ steps.check_files.outputs.next_file != 'none' && steps.test_phase.outcome != 'failure' && steps.stage_phase.outcome != 'failure' }}
        uses: EndBug/add-and-commit@v9
        with:
         add: ${{ steps.check_files.outputs.next_file }}
         author_name: mmulholla
         author_email: mmulholl@redhat.com
         default_author: github_actor
         message: "Update ${{ steps.check_files.outputs.test_phase }} config chart version for Argo CD pipeline testing"
         push: true

